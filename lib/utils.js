// Generated by CoffeeScript 1.12.4
var utils,
  slice = [].slice;

utils = {
  Fulfilled: function(value) {
    return new Promise(function(resolve, reject) {
      return resolve(value);
    });
  },
  Rejected: function(e) {
    return new Promise(function(resolve, reject) {
      return reject(e);
    });
  },
  promiseFinally: function(p, callback) {
    return p.then(function(v) {
      callback();
      return v;
    }, function(e) {
      callback();
      throw e;
    });
  },
  ensurePromise: function(x) {
    if (typeof (x != null ? x.then : void 0) === 'function') {
      return x;
    } else {
      return utils.Fulfilled(x);
    }
  },
  values: function(obj) {
    var k, results, v;
    results = [];
    for (k in obj) {
      v = obj[k];
      results.push(v);
    }
    return results;
  },
  pluck: function() {
    var f, fields, i, len, obj, result;
    obj = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (obj == null) {
      return {};
    }
    result = {};
    for (i = 0, len = fields.length; i < len; i++) {
      f = fields[i];
      if (f in obj) {
        result[f] = obj[f];
      }
    }
    return result;
  },
  clone: function(obj, options) {
    var i, j, k, len, len1, ref, ref1, res;
    if (options == null) {
      options = {};
    }
    if (obj == null) {
      return obj;
    }
    res = {};
    if (options.only) {
      ref = options.only;
      for (i = 0, len = ref.length; i < len; i++) {
        k = ref[i];
        res[k] = obj[k];
      }
    } else {
      for (k in obj) {
        res[k] = obj[k];
      }
    }
    if (options.except) {
      ref1 = options.except;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        k = ref1[j];
        delete res[k];
      }
    }
    return res;
  },
  invert: function(obj) {
    var k, res, v;
    res = {};
    for (k in obj) {
      v = obj[k];
      res[v] = k;
    }
    return res;
  },
  upperFirst: function(str) {
    return str[0].toUpperCase() + str.slice(1);
  },
  lowerFirst: function(str) {
    return str[0].toLowerCase() + str.slice(1);
  },
  forceTransaction: function(transaction, options, callback) {
    if (options == null) {
      options = {};
    }
    if (options.transacting != null) {
      return callback(options);
    } else {
      return transaction(function(trx) {
        var oldTtransacting;
        oldTtransacting = options.transacting;
        options.transacting = trx;
        return utils.promiseFinally(callback(options), function() {
          return options.transacting = oldTtransacting;
        });
      });
    }
  }
};

module.exports = utils;
