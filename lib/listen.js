// Generated by CoffeeScript 1.12.4

/*
 *
 *  Listen 'fetched', 'onFetched'
 *  Listen 'fetched', -> log 'model fetched'
 *
 */
var Listen, ensurePromise,
  slice = [].slice;

ensurePromise = require('./utils').ensurePromise;

Listen = (function() {
  function Listen() {
    var callbacks, event;
    event = arguments[0], callbacks = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!(this instanceof Listen)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Listen, [event].concat(slice.call(callbacks)), function(){});
    }
    this.event = event;
    if (typeof callbacks[callbacks.length - 1] === 'object') {
      this.options = callbacks.pop();
    } else {
      this.options = {};
    }
    this.callbacks = callbacks;
  }

  Listen.prototype.contributeToSchema = function(schema) {
    return schema.push(this);
  };

  Listen.prototype.contributeToModel = function() {};

  Listen.prototype.initialize = function(instance) {
    var c, condition, fns, listener;
    fns = (function() {
      var i, len, ref, results1;
      ref = this.callbacks;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        results1.push(this._bindCallback(c, instance));
      }
      return results1;
    }).call(this);
    listener = this.options.condition ? (condition = this._bindCallback(this.options.condition, instance), function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ensurePromise(condition.apply(null, args)).then(function(result) {
        var f, results;
        if (result) {
          results = (function() {
            var i, len, results1;
            results1 = [];
            for (i = 0, len = fns.length; i < len; i++) {
              f = fns[i];
              results1.push(ensurePromise(f.apply(null, args)));
            }
            return results1;
          })();
          return Promise.all(results);
        }
      });
    }) : function() {
      var args, f, results;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = fns.length; i < len; i++) {
          f = fns[i];
          results1.push(ensurePromise(f.apply(null, args)));
        }
        return results1;
      })();
      return Promise.all(results);
    };
    return instance.on(this.event, listener);
  };

  Listen.prototype._bindCallback = function(c, instance) {
    if (typeof c === 'string') {
      return instance[c].bind(instance);
    } else {
      return c.bind(instance);
    }
  };

  return Listen;

})();

module.exports = Listen;
